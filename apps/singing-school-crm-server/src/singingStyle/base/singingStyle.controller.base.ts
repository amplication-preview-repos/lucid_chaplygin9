/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SingingStyleService } from "../singingStyle.service";
import { SingingStyleCreateInput } from "./SingingStyleCreateInput";
import { SingingStyle } from "./SingingStyle";
import { SingingStyleFindManyArgs } from "./SingingStyleFindManyArgs";
import { SingingStyleWhereUniqueInput } from "./SingingStyleWhereUniqueInput";
import { SingingStyleUpdateInput } from "./SingingStyleUpdateInput";
import { CourseFindManyArgs } from "../../course/base/CourseFindManyArgs";
import { Course } from "../../course/base/Course";
import { CourseWhereUniqueInput } from "../../course/base/CourseWhereUniqueInput";

export class SingingStyleControllerBase {
  constructor(protected readonly service: SingingStyleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SingingStyle })
  async createSingingStyle(
    @common.Body() data: SingingStyleCreateInput
  ): Promise<SingingStyle> {
    return await this.service.createSingingStyle({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SingingStyle] })
  @ApiNestedQuery(SingingStyleFindManyArgs)
  async singingStyles(@common.Req() request: Request): Promise<SingingStyle[]> {
    const args = plainToClass(SingingStyleFindManyArgs, request.query);
    return this.service.singingStyles({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SingingStyle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async singingStyle(
    @common.Param() params: SingingStyleWhereUniqueInput
  ): Promise<SingingStyle | null> {
    const result = await this.service.singingStyle({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SingingStyle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSingingStyle(
    @common.Param() params: SingingStyleWhereUniqueInput,
    @common.Body() data: SingingStyleUpdateInput
  ): Promise<SingingStyle | null> {
    try {
      return await this.service.updateSingingStyle({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SingingStyle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSingingStyle(
    @common.Param() params: SingingStyleWhereUniqueInput
  ): Promise<SingingStyle | null> {
    try {
      return await this.service.deleteSingingStyle({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/courses")
  @ApiNestedQuery(CourseFindManyArgs)
  async findCourses(
    @common.Req() request: Request,
    @common.Param() params: SingingStyleWhereUniqueInput
  ): Promise<Course[]> {
    const query = plainToClass(CourseFindManyArgs, request.query);
    const results = await this.service.findCourses(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        endDate: true,
        id: true,

        location: {
          select: {
            id: true,
          },
        },

        singingStyle: {
          select: {
            id: true,
          },
        },

        startDate: true,

        student: {
          select: {
            id: true,
          },
        },

        teacher: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/courses")
  async connectCourses(
    @common.Param() params: SingingStyleWhereUniqueInput,
    @common.Body() body: CourseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      courses: {
        connect: body,
      },
    };
    await this.service.updateSingingStyle({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/courses")
  async updateCourses(
    @common.Param() params: SingingStyleWhereUniqueInput,
    @common.Body() body: CourseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      courses: {
        set: body,
      },
    };
    await this.service.updateSingingStyle({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/courses")
  async disconnectCourses(
    @common.Param() params: SingingStyleWhereUniqueInput,
    @common.Body() body: CourseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      courses: {
        disconnect: body,
      },
    };
    await this.service.updateSingingStyle({
      where: params,
      data,
      select: { id: true },
    });
  }
}
