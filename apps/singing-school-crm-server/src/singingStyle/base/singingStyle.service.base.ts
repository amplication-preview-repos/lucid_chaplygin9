/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SingingStyle as PrismaSingingStyle,
  Course as PrismaCourse,
} from "@prisma/client";

export class SingingStyleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SingingStyleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.singingStyle.count(args);
  }

  async singingStyles(
    args: Prisma.SingingStyleFindManyArgs
  ): Promise<PrismaSingingStyle[]> {
    return this.prisma.singingStyle.findMany(args);
  }
  async singingStyle(
    args: Prisma.SingingStyleFindUniqueArgs
  ): Promise<PrismaSingingStyle | null> {
    return this.prisma.singingStyle.findUnique(args);
  }
  async createSingingStyle(
    args: Prisma.SingingStyleCreateArgs
  ): Promise<PrismaSingingStyle> {
    return this.prisma.singingStyle.create(args);
  }
  async updateSingingStyle(
    args: Prisma.SingingStyleUpdateArgs
  ): Promise<PrismaSingingStyle> {
    return this.prisma.singingStyle.update(args);
  }
  async deleteSingingStyle(
    args: Prisma.SingingStyleDeleteArgs
  ): Promise<PrismaSingingStyle> {
    return this.prisma.singingStyle.delete(args);
  }

  async findCourses(
    parentId: string,
    args: Prisma.CourseFindManyArgs
  ): Promise<PrismaCourse[]> {
    return this.prisma.singingStyle
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .courses(args);
  }
}
