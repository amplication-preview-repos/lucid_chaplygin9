/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SingingStyle } from "./SingingStyle";
import { SingingStyleCountArgs } from "./SingingStyleCountArgs";
import { SingingStyleFindManyArgs } from "./SingingStyleFindManyArgs";
import { SingingStyleFindUniqueArgs } from "./SingingStyleFindUniqueArgs";
import { CreateSingingStyleArgs } from "./CreateSingingStyleArgs";
import { UpdateSingingStyleArgs } from "./UpdateSingingStyleArgs";
import { DeleteSingingStyleArgs } from "./DeleteSingingStyleArgs";
import { CourseFindManyArgs } from "../../course/base/CourseFindManyArgs";
import { Course } from "../../course/base/Course";
import { SingingStyleService } from "../singingStyle.service";
@graphql.Resolver(() => SingingStyle)
export class SingingStyleResolverBase {
  constructor(protected readonly service: SingingStyleService) {}

  async _singingStylesMeta(
    @graphql.Args() args: SingingStyleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SingingStyle])
  async singingStyles(
    @graphql.Args() args: SingingStyleFindManyArgs
  ): Promise<SingingStyle[]> {
    return this.service.singingStyles(args);
  }

  @graphql.Query(() => SingingStyle, { nullable: true })
  async singingStyle(
    @graphql.Args() args: SingingStyleFindUniqueArgs
  ): Promise<SingingStyle | null> {
    const result = await this.service.singingStyle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SingingStyle)
  async createSingingStyle(
    @graphql.Args() args: CreateSingingStyleArgs
  ): Promise<SingingStyle> {
    return await this.service.createSingingStyle({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SingingStyle)
  async updateSingingStyle(
    @graphql.Args() args: UpdateSingingStyleArgs
  ): Promise<SingingStyle | null> {
    try {
      return await this.service.updateSingingStyle({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SingingStyle)
  async deleteSingingStyle(
    @graphql.Args() args: DeleteSingingStyleArgs
  ): Promise<SingingStyle | null> {
    try {
      return await this.service.deleteSingingStyle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Course], { name: "courses" })
  async findCourses(
    @graphql.Parent() parent: SingingStyle,
    @graphql.Args() args: CourseFindManyArgs
  ): Promise<Course[]> {
    const results = await this.service.findCourses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
